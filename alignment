import sys
import os
import pathlib
import numpy as np
import matplotlib
import mne
from mne.minimum_norm import make_inverse_operator, apply_inverse
from mne.coreg import Coregistration
from mne.io import read_info
from ica import pca_whiten, ica1
import zickle as zkl

from mne.datasets import sample
from pathlib import Path
from ica import pca_whiten, ica1,infomax1
import copy




#source_dir = '/data/users2/mjafarlou1/devcogEC-CO/M87160608+Study20151230+eyesclosedopen_session1_raw_EC_segment_raw.fif'
source_dir = '/data/users2/mjafarlou1/devcogEC-CO/M87155237+Study20160408+eyesclosedopen_session1_raw_EC_segment_raw.fif'
#subjects_dir = '/data/users2/mjafarlou1/DevCog/A00063430'
subjects_dir = '/data/users2/mjafarlou1/DevCog/A00066226'
stc_directory = '/data/users2/mjafarlou1/devcog-re'
#subject = '00000001+d52a1937'
subject = '00000001+38a4d3cd'


fname_raw = source_dir
info = read_info(fname_raw)

fiducials = "estimated"  # get fiducials from fsaverage
coreg = Coregistration(info, subject, subjects_dir, fiducials=fiducials)

coreg.fit_fiducials(verbose=True)

coreg.fit_icp(n_iterations=6, nasion_weight=2.0, verbose=True)

coreg.omit_head_shape_points(distance=5.0 / 1000)  # distance is in meters

coreg.fit_icp(n_iterations=20, nasion_weight=10.0, verbose=True)

dists = coreg.compute_dig_mri_distances() * 1e3  # in mm
print(
    f"Distance between HSP and MRI (mean/min/max):\n{np.mean(dists):.2f} mm "
    f"/ {np.min(dists):.2f} mm / {np.max(dists):.2f} mm"
)
    
raw = mne.io.read_raw_fif(source_dir, preload=True)

info = raw.info
trans = coreg.trans

os.environ['SUBJECTS_DIR'] = subjects_dir

# Load source space
spacing = 'oct6' # all-ico5-oct6
src = mne.setup_source_space(subject, spacing=spacing, subjects_dir=subjects_dir)

# Compute BEM model and solution
conductivity = (0.3,)  # for single layer
model = mne.make_bem_model(subject=subject, ico=4, conductivity=conductivity, subjects_dir=subjects_dir)
bem = mne.make_bem_solution(model)

#  forward solution
fwd = mne.make_forward_solution(info=info, trans=trans, src=src, bem=bem, meg=True, eeg=False, ignore_ref=True,)

fwd = mne.convert_forward_solution(fwd, surf_ori=True, 
                                        force_fixed=True, copy=False, 
                                        use_cps=True,
                                        verbose=None)

# covariance matrix
cov = mne.compute_raw_covariance(raw, tmin=0, tmax=None, method=['shrunk', 'diagonal_fixed', 'empirical'], rank='info')
    
# make inverse solution
fixed = True  # set to False for free estimates
inv = mne.minimum_norm.make_inverse_operator(info, fwd, cov, depth=None, loose='auto', fixed=True)
lambda2 = 1.0 / 2.0 ** 2 #SNR=2 for single trail
        
stcs = mne.minimum_norm.apply_inverse_raw(raw, inv, lambda2, method='dSPM', use_cps=True)
    
stcs
raw_filename=source_dir



###alignment
subjects_dir = '/data/users2/mjafarlou1/DevCog/A00066226/00000001+38a4d3cd'

# Create a Path object for the source file
fname_fsaverage_src = Path(subjects_dir) / "fsaverage" / "bem" / "fsaverage-ico-5-src.fif"

src_to = mne.read_source_spaces(fname_fsaverage_src)
print(src_to[0]["vertno"])  # special, np.arange(10242)
morph = mne.compute_source_morph(
    stcs,
    subject_from="00000001+38a4d3cd",
    
    subject_to="fsaverage",
    src_to=src_to,
    subjects_dir=subjects_dir,
)


stc_mne_aligned_to_ours = morph.apply(stcs)  # Here, using `stc_mne` as an example, replace with your `stcs`
stc=stc_mne_aligned_to_ours

########end of alignment

A,S,W  = ica1(stc.data.T, 100)

stc_for_ica_comps = copy.deepcopy(stc)
stc_for_ica_comps.data = S.T


output_path = '/data/users2/mjafarlou1/devcogEC-CO/M87155237+Study20160408+eyesclosedopen_session1_raw_EC_segment_l_raw.stc'

stc_for_ica_comps.save(output_path,overwrite=True)

print(f"Modified STC saved to: {output_path}")
